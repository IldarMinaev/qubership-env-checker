name: Build Artifacts

on:
  release:
    types: [created]
  push:
    branches:
      - '**'
    paths:
      - '**'
      - '!.github/**'
      - '.github/workflows/build.yaml'
      - '!docs/**'
  workflow_dispatch:
    inputs:
      postfix:
        description: 'Postfix for tag name'
        required: false

permissions:
  contents: read

env:
  RAW_TAG_NAME: ${{ github.event.release.tag_name != '' && github.event.release.tag_name || github.ref_name }}
  TAG_POSTFIX: ${{ inputs.postfix || '' }}

jobs:
  multiplatform_build:
    permissions:
      actions: read          # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status
      contents: read         # for actions/checkout to fetch code
      packages: write        # for publishing docker image to ghcr.io registry
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
    strategy:
      fail-fast: false
      matrix:
        component:
          - name: qubership-env-checker
            file: Dockerfile
            context: .
        platform:
          - amd64
          - arm64
    runs-on: ubuntu-latest
    steps:
      - name: Prepare for multiplatform build
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

      - name: Compute repository name
        id: owner
        run: |
          OWNER="${{ github.repository_owner }}"
          OWNER="${OWNER,,}"
          OWNER=$(echo "$OWNER" | sed -E 's/[^a-z0-9._-]+/-/g')
          echo "owner=$OWNER" >> $GITHUB_OUTPUT

      - name: Compute image tag
        id: tag
        run: |
          NAME="${RAW_TAG_NAME}"
          # sanitize to be a valid docker tag: lowercase, replace invalid chars, max length 128
          NAME="${NAME,,}"
          NAME=$(echo "$NAME" | sed -E 's/[^a-z0-9._-]+/-/g')
          # optional postfix
          if [ -n "${TAG_POSTFIX}" ]; then
            POSTFIX=$(echo "${TAG_POSTFIX}" | sed -E 's/[^a-z0-9._-]+/-/g')
            NAME="${NAME}-${POSTFIX}"
          fi
          echo "tag=$NAME" >> $GITHUB_OUTPUT

      - name: Get short SHA
        id: sha
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f # v5.8.0
        with:
          images: ghcr.io/${{ steps.owner.outputs.owner }}/${{ matrix.component.name }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
          labels: |
            org.opencontainers.image.title=${{ matrix.component.name }}
            org.opencontainers.image.authors="qubership.org"
            org.opencontainers.image.source="https://github.com/${{ github.repository }}"

      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Login to Docker Registry
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # v3.5.0
        with:
          password: ${{secrets.GITHUB_TOKEN}}
          registry: ghcr.io
          username: ${GITHUB_ACTOR}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3.6.0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1

      - name: Build and push
        id: build
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
        with:
          context: '${{ matrix.component.context }}'
          file: '${{ matrix.component.file }}'
          labels: ${{ steps.meta.outputs.labels }}
          load: true
          no-cache: true
          outputs: type=image,push-by-digest=true,name-canonical=true
          platforms: 'linux/${{ matrix.platform }}'
          provenance: false
          push: "${{ vars.PUBLISH_DOCKER_IMAGES == 'true' }}"
          tags: |
            ghcr.io/${{ steps.owner.outputs.owner }}/${{ matrix.component.name }}:${{ steps.sha.outputs.sha_short }}
            ghcr.io/${{ steps.owner.outputs.owner }}/${{ matrix.component.name }}:${{ steps.tag.outputs.tag }}
            ghcr.io/${{ steps.owner.outputs.owner }}/${{ matrix.component.name }}:${{ steps.sha.outputs.sha_short }}-${{ matrix.platform }}
            ghcr.io/${{ steps.owner.outputs.owner }}/${{ matrix.component.name }}:${{ steps.tag.outputs.tag }}-${{ matrix.platform }}

      - name: Export digest
        run: |
          mkdir -p ${{ runner.temp }}/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "${{ runner.temp }}/digests/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: digests-${{ env.PLATFORM_PAIR }}
          path: ${{ runner.temp }}/digests/*
          if-no-files-found: error
          retention-days: 1

      - name: Run Trivy vulnerability scanner (${{ matrix.platform }})
        uses: aquasecurity/trivy-action@b6643a29fecd7f34b3597bc6acb0a98b03d33ff8 # 0.33.1
        with:
          format: 'sarif'
          image-ref: 'ghcr.io/${{ steps.owner.outputs.owner }}/${{ matrix.component.name }}:${{ steps.sha.outputs.sha_short }}-${{ matrix.platform }}'
          output: 'trivy-results-${{ matrix.platform }}.sarif'
          scanners: 'vuln'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results (${{ matrix.platform }}) to GitHub Security tab
        uses: github/codeql-action/upload-sarif@192325c86100d080feab897ff886c34abd4c83a3 # v3.30.3
        if: always() # always run even upon a non zero exit code from Trivy Scanner
        with:
          sarif_file: 'trivy-results-${{ matrix.platform }}.sarif'

      - name: Run Docker Scout CVEs scanner (${{ matrix.platform }})
        uses: docker/scout-action@f8c776824083494ab0d56b8105ba2ca85c86e4de # v1.18.2
        with:
          command: cves
          dockerhub-password: ${{ secrets.DOCKERHUB_RW_TOKEN }}
          dockerhub-user: ${{ secrets.DOCKERHUB_USER }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          image: 'ghcr.io/${{ steps.owner.outputs.owner }}/${{ matrix.component.name }}:${{ steps.sha.outputs.sha_short }}-${{ matrix.platform }}'
          only-severities: 'critical,high'
          registry-password: ${{secrets.GITHUB_TOKEN}}
          registry-user: ${GITHUB_ACTOR}
          sarif-file: scout-results-${{ matrix.platform }}.sarif
          summary: true

      - name: Upload Docker Scout scan results (${{ matrix.platform }}) to GitHub Security tab
        uses: github/codeql-action/upload-sarif@192325c86100d080feab897ff886c34abd4c83a3 # v3.30.3
        with:
          sarif_file: scout-results-${{ matrix.platform }}.sarif

      - name: Run Anchore Grype scanner (${{ matrix.platform }})
        uses: anchore/scan-action@f6601287cdb1efc985d6b765bbf99cb4c0ac29d8 # v7.0.0
        with:
          fail-build: false
          image: 'ghcr.io/${{ steps.owner.outputs.owner }}/${{ matrix.component.name }}:${{ steps.sha.outputs.sha_short }}-${{ matrix.platform }}'
          output-format: sarif
          output-file: grype-results-${{ matrix.platform }}.sarif

      - name: Upload Anchore Grype scan results (${{ matrix.platform }}) to GitHub Security tab
        uses: github/codeql-action/upload-sarif@192325c86100d080feab897ff886c34abd4c83a3 # v3.30.3
        with:
          sarif_file: grype-results-${{ matrix.platform }}.sarif

  merge:
    permissions:
      actions: read
      contents: read
      packages: write
      security-events: write
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - name: Download digests
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          path: ${{ runner.temp }}/digests
          pattern: digests-*
          merge-multiple: true

      - name: Login to Docker Registry
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # v3.5.0
        with:
          password: ${{secrets.GITHUB_TOKEN}}
          registry: ghcr.io
          username: ${GITHUB_ACTOR}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f # v5.8.0
        with:
          images: ghcr.io/${{ steps.owner.outputs.owner }}/${{ matrix.component.name }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
          labels: |
            org.opencontainers.image.title=${{ matrix.component.name }}
            org.opencontainers.image.authors="qubership.org"
            org.opencontainers.image.source="https://github.com/${{ github.repository }}"

      - name: Create manifest list and push
        working-directory: ${{ runner.temp }}/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf 'ghcr.io/${{ steps.owner.outputs.owner }}/${{ matrix.component.name }}@sha256:%s ' *)

      - name: Inspect image
        run: |
          docker buildx imagetools inspect ghcr.io/${{ steps.owner.outputs.owner }}/${{ matrix.component.name }}:${{ steps.meta.outputs.version }}
